__kernel void gpuTensorPad2_FP32_chn(
    image2d_array_t input,
    int in_chn_num,
    int out_chn_num,
    int in_batch_num,
    int padLeft,
    int padTop,
    int padChn,
    int padBatchFront,
    uint constData,
    image2d_array_t output)
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    ushort gidz = get_global_id(2);
    int cid = gidz % (ushort)out_chn_num;
    int bid = gidz / (ushort)out_chn_num;
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);

    int inc = cid - padChn;

    if(inc >=0 && inc < in_chn_num)
    {
        int4 coord_in = (int4)(gidx - padLeft, gidy - padTop, inc + bid * in_chn_num, 0);
        float4 tmp = {0.0};
        tmp = read_imagef(input, coord_in);
        write_imagef(output, coord_out, tmp);
    }
    else
    {
        float4 tmp = {constData, constData, constData, constData};
        write_imagef(output, coord_out, tmp);
    }
}

__kernel void gpuTensorPad2_FP32_wh(
    image2d_array_t input,
    int in_chn_num,
    int out_chn_num,
    int in_batch_num,
    int padLeft,
    int padTop,
    int padChn,
    int padBatchFront,
    uint constData,
    image2d_array_t output)
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord_out = (int4)(x, y, z, 0);
    int inx = x - padLeft;
    int iny = y - padTop;
    int4 coord_in = (int4)(inx, iny, z, 0);
    float4 tmp = {0.0};

    tmp = read_imagef(input, coord_in);
    write_imagef(output, coord_out, tmp);
}

__kernel void gpuTensorPad2_U8_chn(
    image2d_array_t input,
    int in_chn_num,
    int out_chn_num,
    int in_batch_num,
    int padLeft,
    int padTop,
    int padChn,
    int padBatchFront,
    uint constData,
    image2d_array_t output)
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    ushort gidz = get_global_id(2);
    int cid = gidz % (ushort)out_chn_num;
    int bid = gidz / (ushort)out_chn_num;
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);

    int inc = cid - padChn;

    if(inc >=0 && inc < in_chn_num)
    {
        int4 coord_in = (int4)(gidx - padLeft, gidy - padTop, inc + bid * in_chn_num, 0);
        uint4 tmp = {0};
        tmp = read_imageui(input, coord_in);
        write_imageui(output, coord_out, tmp);
    }
    else
    {
        uint4 tmp = {constData, constData, constData, constData};
        write_imageui(output, coord_out, tmp);
    }
}

__kernel void gpuTensorPad2_U8_wh(
    image2d_array_t input,
    int in_chn_num,
    int out_chn_num,
    int in_batch_num,
    int padLeft,
    int padTop,
    int padChn,
    int padBatchFront,
    uint constData,
    image2d_array_t output)
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord_out = (int4)(x, y, z, 0);
    int inx = x - padLeft;
    int iny = y - padTop;
    int4 coord_in = (int4)(inx, iny, z, 0);
    uint4 tmp = {0};

    tmp = read_imageui(input, coord_in);
    write_imageui(output, coord_out, tmp);
}

__kernel void gpuTensorPad2_U8_nchw(
    image2d_array_t input,
    int in_chn_num,
    int out_chn_num,
    int in_batch_num,
    int padLeft,
    int padTop,
    int padChn,
    int padBatchFront,
    uint constData,
    image2d_array_t output)
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    ushort gidz = get_global_id(2);
    int cid = gidz % (ushort)out_chn_num;
    int bid = gidz / (ushort)out_chn_num;
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);

    int inb_f = bid - padBatchFront;
    int inc = cid - padChn;

    if((inb_f >= 0 && inb_f < in_batch_num)
        && (inc >=0 && inc < in_chn_num))
    {
        int4 coord_in = (int4)(gidx - padLeft, gidy - padTop, inc + inb_f * in_chn_num, 0);
        uint4 tmp = {0};
        tmp = read_imageui(input, coord_in);
        write_imageui(output, coord_out, tmp);
    }
    else
    {
        uint4 tmp = {constData, constData, constData, constData};
        write_imageui(output, coord_out, tmp);
    }
}

__kernel void gpuTensorPad2_FP32_nchw(
    image2d_array_t input,
    int in_chn_num,
    int out_chn_num,
    int in_batch_num,
    int padLeft,
    int padTop,
    int padChn,
    int padBatchFront,
    float constData,
    image2d_array_t output)
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    ushort gidz = get_global_id(2);
    int cid = gidz % (ushort)out_chn_num;
    int bid = gidz / (ushort)out_chn_num;
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);

    int inb_f = bid - padBatchFront;
    int inc = cid - padChn;

    if((inb_f >= 0 && inb_f < in_batch_num)
        && (inc >=0 && inc < in_chn_num))
    {
        int4 coord_in = (int4)(gidx - padLeft, gidy - padTop, inc + inb_f * in_chn_num, 0);
        float4 tmp = {0.0};
        tmp = read_imagef(input, coord_in);
        write_imagef(output, coord_out, tmp);
    }
    else
    {
        float4 tmp = {constData, constData, constData, constData};
        write_imagef(output, coord_out, tmp);
    }
}