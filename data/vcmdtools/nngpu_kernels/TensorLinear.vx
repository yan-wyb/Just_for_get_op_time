
/**************Float to Float****************************/
__kernel void vxTensorLinear_FP32toFP32_4x(
    __read_only  image2d_array_t  input,
    __write_only image2d_array_t  output,
    float                         a_scale,
    float                         b_offset
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    float4 src;
    src = read_imagef(input, coord);

    float4 dst = src * a_scale + b_offset;

    write_imagef(output, coord, dst);
}

__kernel void vxTensorLinear_FP32toFP32_4s(
    __read_only  image2d_array_t  input,
    __write_only image2d_array_t  output,
    float                         a_scale,
    float                         b_offset
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    float4 src;
    src = read_imagef(input, coord);

    float4 dst = src * a_scale + b_offset;
    write_imagef(output, coord, dst.xxxx);
    coord.x++;
    write_imagef(output, coord, dst.yyyy);
    coord.x++;
    write_imagef(output, coord, dst.zzzz);
    coord.x++;
    write_imagef(output, coord, dst.wwww);
}

__kernel void vxTensorLinear_FP32toFP32_2D_4x(
    __read_only  image2d_t        input,
    __write_only image2d_t        output,
    float                         a_scale,
    float                         b_offset
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    float4 src;
    src = read_imagef(input, coord);

    float4 dst = src * a_scale + b_offset;

    write_imagef(output, coord, dst);
}

__kernel void vxTensorLinear_FP32toFP32_2D_4s(
    __read_only  image2d_t        input,
    __write_only image2d_t        output,
    float                         a_scale,
    float                         b_offset
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    float4 src;
    src = read_imagef(input, coord);

    float4 dst = src * a_scale + b_offset;
    write_imagef(output, coord, dst.xxxx);
    coord.x++;
    write_imagef(output, coord, dst.yyyy);
    coord.x++;
    write_imagef(output, coord, dst.zzzz);
    coord.x++;
    write_imagef(output, coord, dst.wwww);
}

/**************Q8 to Q8****************************/
__kernel void vxTensorLinear_Quant8toQuant8_4x(
    __read_only  image2d_array_t  input,
    __write_only image2d_array_t  output,
    float                         a_scale,
    float                         b_offset
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    uint4 src;
    src = read_imageui(input, coord);
    float4 dst0 = convert_float4(src);
    dst0 = dst0 * a_scale + b_offset;
    uint4 dst = convert_uint4(dst0);

    write_imageui(output, coord, dst);
}

__kernel void vxTensorLinear_Quant8toQuant8_4s(
    __read_only  image2d_array_t  input,
    __write_only image2d_array_t  output,
    float                         a_scale,
    float                         b_offset
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    uint4 src;
    src = read_imageui(input, coord);
    float4 dst0 = convert_float4(src);
    dst0 = dst0 * a_scale + b_offset;
    uint4 dst = convert_uint4(dst0);

    write_imageui(output, coord, dst.xxxx);
    coord.x++;
    write_imageui(output, coord, dst.yyyy);
    coord.x++;
    write_imageui(output, coord, dst.zzzz);
    coord.x++;
    write_imageui(output, coord, dst.wwww);
}

__kernel void vxTensorLinear_Quant8toQuant8_2D_4x(
    __read_only  image2d_t        input,
    __write_only image2d_t        output,
    float                         a_scale,
    float                         b_offset
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    uint4 src;
    src = read_imageui(input, coord);
    float4 dst0 = convert_float4(src);
    dst0 = dst0 * a_scale + b_offset;
    uint4 dst = convert_uint4(dst0);

    write_imageui(output, coord, dst);
}

__kernel void vxTensorLinear_Quant8toQuant8_2D_4s(
    __read_only  image2d_t        input,
    __write_only image2d_t        output,
    float                         a_scale,
    float                         b_offset
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    uint4 src;
    src = read_imageui(input, coord);
    float4 dst0 = convert_float4(src);
    dst0 = dst0 * a_scale + b_offset;
    uint4 dst = convert_uint4(dst0);

    write_imageui(output, coord, dst.xxxx);
    coord.x++;
    write_imageui(output, coord, dst.yyyy);
    coord.x++;
    write_imageui(output, coord, dst.zzzz);
    coord.x++;
    write_imageui(output, coord, dst.wwww);
}

