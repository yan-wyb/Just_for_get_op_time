__kernel void gpuSpace2Batch_FP32
    (
    image2d_array_t input,
    int             blockw,
    int             blockh,
    image2d_array_t output,
    int             input_depth_batch,
    int             padX,
    int             padY
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int in_x = x - padX;
    int in_y = y - padY;
    float4 tmp = {0.0};

    tmp = read_imagef(input, (int4)(in_x, in_y, z, 0));

    int out_w = convert_int(convert_short(x) / convert_short(blockw));
    int out_h = convert_int(convert_short(y) / convert_short(blockh));
    int out_batch = x - out_w * blockw+ (y - out_h * blockh) * blockw;
    int out_z = out_batch * input_depth_batch + z;

    write_imagef(output, (int4)(out_w, out_h, out_z, 0), tmp);
}

__kernel void gpuSpace2Batch_Quant8
    (
    image2d_array_t input,
    int             blockw,
    int             blockh,
    image2d_array_t output,
    int             input_depth_batch,
    int             padX,
    int             padY
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int in_x = x - padX;
    int in_y = y - padY;
    uint4 tmp = {0.0};

    tmp = read_imageui(input, (int4)(in_x, in_y, z, 0));

    int out_w = convert_int(convert_short(x) / convert_short(blockw));
    int out_h = convert_int(convert_short(y) / convert_short(blockh));
    int out_batch = x - out_w * blockw + (y - out_h * blockh) * blockw;
    int out_z = out_batch * input_depth_batch + z;

    write_imageui(output, (int4)(out_w, out_h, out_z, 0), tmp);
}