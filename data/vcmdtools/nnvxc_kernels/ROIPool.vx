#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"
_viv_uniform VXC_512Bits uniFp16toFp32_4x4;
_viv_uniform float2 q_PoolWH;
_viv_uniform int2 inputSize;
_viv_uniform int offset;
#define EPS        (0.000002f)
_viv_uniform int minVal;
_viv_uniform float scaleInt16toInt16;
_viv_uniform float scaleROI;
_viv_uniform float roi_tail;

__kernel void roiPooling_generic_int8 (
    __read_only image2d_array_t   input,
    __read_only image2d_array_t   rois,
    int       pool_width,
    int       pool_height,
    float  spatial_scale,
    __write_only image2d_array_t  output)
{
    int depth = get_global_id(1);
    int idx   = get_global_id(0);
    float2 poolWH = (float2)(pool_width, pool_height);

    int2 roiWH;
    float2 roi_size_scale;
    int2 coord_roi = (int2)(offset, idx);

    vxc_ushort8 rect_coord_u16;
    vxc_half8 rect_coord_fp16;
    VXC_ReadImage(rect_coord_u16, rois, coord_roi, 0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, rect_coord_fp16, rect_coord_u16, 16);
    vxc_float4 rect_coord_f;
    VXC_DP4x4(rect_coord_f, rect_coord_fp16, rect_coord_fp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    rect_coord_f = rect_coord_f.xyzw * spatial_scale;
    vxc_int4 rect_coord = convert_int4_rte(rect_coord_f);

    roiWH = rect_coord.zw - rect_coord.xy + 1;
    roiWH = roiWH > 1 ? roiWH : 1;
    roi_size_scale = convert_float2(roiWH) * q_PoolWH;
    float4 pwh = (float4)(0, 0, 1, 1);
    pwh.xy = 0;

    for (int ph = 0; ph < pool_height; ph++)
    {
        pwh.xz = (float2)(0, 1);
        for (int pw = 0; pw < pool_width; pw++)
        {
            float4 tmp = pwh;
            tmp = tmp * roi_size_scale.xyxy;
            tmp.xy = floor(tmp.xy);
            int2 start = convert_int2_rtz(tmp.xy);
            start += rect_coord.xy;
            tmp.zw = ceil(tmp.zw - EPS);
            int2 end = convert_int2_rtz(tmp.zw);
            end += rect_coord.xy;

            pwh.xz += 1;

            int4 coord_out = (int4)(ph * pool_width + pw, depth, idx, 0);
            end.xy  = end.xy > 0 ? end.xy : 0;
            start.xy = start.xy > 0 ?  start.xy : 0;
            end.xy = min(end.xy, inputSize.xy);
            start.xy = min(start.xy, inputSize.xy);
            if(end.y <= start.y || end.x <= start.x)
            {
                char vec = 0;
                VXC_WriteImage2DArray(output, coord_out, vec, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
                continue;
            }
            char output_data = -128;

            int h = start.y;
            do
            {
                int w = start.x;
                do
                {
                    int4 coord_in = (int4)(w, h, depth, 0);
                    char vec0;
                    VXC_ReadImage2DArray(vec0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0,VXC_RM_TowardZero, 0));
                    w ++;
                    output_data = max(output_data, vec0);
                } while (w < end.x);
                h ++;
            } while (h < end.y);
            float temp = convert_float(output_data);
            temp *= scaleInt16toInt16;
            output_data = convert_char_rte(temp);
            char minData;
            _viv_asm(COPY, minData, minVal, 4);
            output_data = max(minData, output_data);
            VXC_WriteImage2DArray(output, coord_out, output_data, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
        }
        pwh.yw += 1;
    }
}

__kernel void roiPooling_generic_int8_int8 (
    __read_only image2d_array_t   input,
    __read_only image2d_array_t   rois,
    int       pool_width,
    int       pool_height,
    float  spatial_scale,
    __write_only image2d_array_t  output)
{
    int depth = get_global_id(1);
    int idx   = get_global_id(0);
    float2 poolWH = (float2)(pool_width, pool_height);

    int2 roiWH;
    float2 roi_size_scale;
    int2 coord_roi = (int2)(offset, idx);

    vxc_char16 rect_coord_u16;
    VXC_ReadImage(rect_coord_u16, rois, coord_roi, 0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    vxc_float4 rect_coord_f;
    VXC_DP4x4(rect_coord_f, rect_coord_u16, rect_coord_u16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    rect_coord_f = rect_coord_f * scaleROI;
    rect_coord_f = rect_coord_f.xyzw * spatial_scale;
    vxc_int4 rect_coord = convert_int4_rte(rect_coord_f);

    roiWH = rect_coord.zw - rect_coord.xy + 1;
    roiWH = roiWH > 1 ? roiWH : 1;
    roi_size_scale = convert_float2(roiWH) * q_PoolWH;
    float4 pwh = (float4)(0, 0, 1, 1);
    pwh.xy = 0;

    for (int ph = 0; ph < pool_height; ph++)
    {
        pwh.xz = (float2)(0, 1);
        for (int pw = 0; pw < pool_width; pw++)
        {
            float4 tmp = pwh;
            tmp = tmp * roi_size_scale.xyxy;
            tmp.xy = floor(tmp.xy);
            int2 start = convert_int2_rtz(tmp.xy);
            start += rect_coord.xy;
            tmp.zw = ceil(tmp.zw - EPS);
            int2 end = convert_int2_rtz(tmp.zw);
            end += rect_coord.xy;

            pwh.xz += 1;

            int4 coord_out = (int4)(ph * pool_width + pw, depth, idx, 0);
            end.xy  = end.xy > 0 ? end.xy : 0;
            start.xy = start.xy > 0 ?  start.xy : 0;
            end.xy = min(end.xy, inputSize.xy);
            start.xy = min(start.xy, inputSize.xy);
            if(end.y <= start.y || end.x <= start.x)
            {
                char vec = 0;
                VXC_WriteImage2DArray(output, coord_out, vec, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
                continue;
            }
            char output_data = -128;

            int h = start.y;
            do
            {
                int w = start.x;
                do
                {
                    int4 coord_in = (int4)(w, h, depth, 0);
                    char vec0;
                    VXC_ReadImage2DArray(vec0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0,VXC_RM_TowardZero, 0));
                    w ++;
                    output_data = max(output_data, vec0);
                } while (w < end.x);
                h ++;
            } while (h < end.y);
            float temp = convert_float(output_data);
            temp *= scaleInt16toInt16;
            output_data = convert_char_rte(temp);
            char minData;
            _viv_asm(COPY, minData, minVal, 4);
            output_data = max(minData, output_data);
            VXC_WriteImage2DArray(output, coord_out, output_data, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
        }
        pwh.yw += 1;
    }
}

__kernel void roiPooling_generic_int16 (
    __read_only image2d_array_t   input,
    __read_only image2d_array_t   rois,
    int       pool_width,
    int       pool_height,
    float  spatial_scale,
    __write_only image2d_array_t  output)
{
    int depth = get_global_id(1);
    int idx   = get_global_id(0);
    float2 poolWH = (float2)(pool_width, pool_height);

    int2 roiWH;
    float2 roi_size_scale;
    int2 coord_roi = (int2)(offset, idx);

    vxc_ushort8 rect_coord_u16;
    vxc_half8 rect_coord_fp16;
    VXC_ReadImage(rect_coord_u16, rois, coord_roi, 0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, rect_coord_fp16, rect_coord_u16, 16);
    vxc_float4 rect_coord_f;
    VXC_DP4x4(rect_coord_f, rect_coord_fp16, rect_coord_fp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    rect_coord_f = rect_coord_f.xyzw * spatial_scale;
    vxc_int4 rect_coord = convert_int4_rte(rect_coord_f);

    roiWH = rect_coord.zw - rect_coord.xy + 1;
    roiWH = roiWH > 1 ? roiWH : 1;
    roi_size_scale = convert_float2(roiWH) * q_PoolWH;
    float4 pwh = (float4)(0, 0, 1, 1);
    pwh.xy = 0;

    for (int ph = 0; ph < pool_height; ph++)
    {
        pwh.xz = (float2)(0, 1);
        for (int pw = 0; pw < pool_width; pw++)
        {
            float4 tmp = pwh;
            tmp = tmp * roi_size_scale.xyxy;
            tmp.xy = floor(tmp.xy);
            int2 start = convert_int2_rtz(tmp.xy);
            start += rect_coord.xy;
            tmp.zw = ceil(tmp.zw - EPS);
            int2 end = convert_int2_rtz(tmp.zw);
            end += rect_coord.xy;

            pwh.xz += 1;

            int4 coord_out = (int4)(ph * pool_width + pw, depth, idx, 0);
            end.xy  = end.xy > 0 ? end.xy : 0;
            start.xy = start.xy > 0 ?  start.xy : 0;
            end.xy = min(end.xy, inputSize.xy);
            start.xy = min(start.xy, inputSize.xy);
            if(end.y <= start.y || end.x <= start.x)
            {
                short vec = 0;
                VXC_WriteImage2DArray(output, coord_out, vec, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
                continue;
            }
            short output_data = -32768;

            int h = start.y;
            do
            {
                int w = start.x;
                do
                {
                    int4 coord_in = (int4)(w, h, depth, 0);
                    short vec0;
                    VXC_ReadImage2DArray(vec0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0,VXC_RM_TowardZero, 0));
                    w ++;
                    output_data = max(output_data, vec0);
                } while (w < end.x);
                h ++;
            } while (h < end.y);
            float temp = convert_float(output_data);
            temp *= scaleInt16toInt16;
            output_data = convert_short_rte(temp);
            short minData;
            _viv_asm(COPY, minData, minVal, 4);
            output_data = max(minData, output_data);
            VXC_WriteImage2DArray(output, coord_out, output_data, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
        }
        pwh.yw += 1;
    }
}

__kernel void roiPooling_generic_int16_int16 (
    __read_only image2d_array_t   input,
    __read_only image2d_array_t   rois,
    int       pool_width,
    int       pool_height,
    float  spatial_scale,
    __write_only image2d_array_t  output)
{
    int depth = get_global_id(1);
    int idx   = get_global_id(0);
    float2 poolWH = (float2)(pool_width, pool_height);

    int2 roiWH;
    float2 roi_size_scale;
    int2 coord_roi = (int2)(offset, idx);

    vxc_short8 rect_coord_I16;
    VXC_ReadImage(rect_coord_I16, rois, coord_roi, 0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    vxc_float4 rect_coord_f;
    VXC_DP4x4(rect_coord_f, rect_coord_I16, rect_coord_I16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    rect_coord_f = rect_coord_f * scaleROI;
    rect_coord_f = rect_coord_f.xyzw * spatial_scale;
    vxc_int4 rect_coord = convert_int4_rte(rect_coord_f);

    roiWH = rect_coord.zw - rect_coord.xy + 1;
    roiWH = roiWH > 1 ? roiWH : 1;
    roi_size_scale = convert_float2(roiWH) * q_PoolWH;
    float4 pwh = (float4)(0, 0, 1, 1);
    pwh.xy = 0;

    for (int ph = 0; ph < pool_height; ph++)
    {
        pwh.xz = (float2)(0, 1);
        for (int pw = 0; pw < pool_width; pw++)
        {
            float4 tmp = pwh;
            tmp = tmp * roi_size_scale.xyxy;
            tmp.xy = floor(tmp.xy);
            int2 start = convert_int2_rtz(tmp.xy);
            start += rect_coord.xy;
            tmp.zw = ceil(tmp.zw - EPS);
            int2 end = convert_int2_rtz(tmp.zw);
            end += rect_coord.xy;

            pwh.xz += 1;

            int4 coord_out = (int4)(ph * pool_width + pw, depth, idx, 0);
            end.xy  = end.xy > 0 ? end.xy : 0;
            start.xy = start.xy > 0 ?  start.xy : 0;
            end.xy = min(end.xy, inputSize.xy);
            start.xy = min(start.xy, inputSize.xy);
            if(end.y <= start.y || end.x <= start.x)
            {
                short vec = 0;
                VXC_WriteImage2DArray(output, coord_out, vec, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
                continue;
            }
            short output_data = -32768;

            int h = start.y;
            do
            {
                int w = start.x;
                do
                {
                    int4 coord_in = (int4)(w, h, depth, 0);
                    short vec0;
                    VXC_ReadImage2DArray(vec0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0,VXC_RM_TowardZero, 0));
                    w ++;
                    output_data = max(output_data, vec0);
                } while (w < end.x);
                h ++;
            } while (h < end.y);
            float temp = convert_float(output_data);
            temp *= scaleInt16toInt16;
            output_data = convert_short_rte(temp);
            short minData;
            _viv_asm(COPY, minData, minVal, 4);
            output_data = max(minData, output_data);
            VXC_WriteImage2DArray(output, coord_out, output_data, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
        }
        pwh.yw += 1;
    }
}


__kernel void roiPooling_generic_fp16 (
    __read_only image2d_array_t   input,
    __read_only image2d_array_t   rois,
    int       pool_width,
    int       pool_height,
    float  spatial_scale,
    __write_only image2d_array_t  output)
{
    int depth = get_global_id(1);
    int idx   = get_global_id(0);
    float2 poolWH = (float2)(pool_width, pool_height);

    int2 roiWH;
    float2 roi_size_scale;
    int2 coord_roi = (int2)(offset, idx);

    vxc_ushort8 rect_coord_u16;
    vxc_half8 rect_coord_fp16;
    VXC_ReadImage(rect_coord_u16, rois, coord_roi, 0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, rect_coord_fp16, rect_coord_u16, 16);
    vxc_float4 rect_coord_f;
    VXC_DP4x4(rect_coord_f, rect_coord_fp16, rect_coord_fp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);

    rect_coord_f = rect_coord_f.xyzw * spatial_scale;
    vxc_int4 rect_coord = convert_int4_rte(rect_coord_f);

    roiWH = rect_coord.zw - rect_coord.xy + 1;
    roiWH = roiWH > 1 ? roiWH : 1;
    roi_size_scale = convert_float2(roiWH) * q_PoolWH;
    float4 pwh = (float4)(0, 0, 1, 1);
    pwh.xy = 0;

    for (int ph = 0; ph < pool_height; ph++)
    {
        pwh.xz = (float2)(0, 1);
        for (int pw = 0; pw < pool_width; pw++)
        {
            float4 tmp = pwh;
            tmp = tmp * roi_size_scale.xyxy;
            tmp.xy = floor(tmp.xy);
            int2 start = convert_int2_rtz(tmp.xy);
            start += rect_coord.xy;
            tmp.zw = ceil(tmp.zw - EPS);
            int2 end = convert_int2_rtz(tmp.zw);
            end += rect_coord.xy;

            pwh.xz += 1;
            int4 coord_out = (int4)(ph * pool_width + pw, depth, idx, 0);
            end.xy  = end.xy > 0 ? end.xy : 0;
            start.xy = start.xy > 0 ?  start.xy : 0;
            end.xy = min(end.xy, inputSize.xy);
            start.xy = min(start.xy, inputSize.xy);
            if(end.y <= start.y || end.x <= start.x)
            {
                short vec = 0;
                VXC_WriteImage2DArray(output, coord_out, vec, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
                continue;
            }
            vxc_short8 output_data = {0, 0, 0, 0, 0, 0, 0, 0};

            int h = start.y;
            do
            {
                int w = start.x;
                do
                {
                    int4 coord_in = (int4)(w, h, depth, 0);
                    vxc_short8 vec0;
                    VXC_ReadImage2DArray(vec0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0,VXC_RM_TowardZero, 0));
                    w ++;
                    output_data = max(output_data, vec0);
                } while (w < end.x);
                h ++;
            } while (h < end.y);
            VXC_WriteImage2DArray(output, coord_out, output_data, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
        }
        pwh.yw += 1;
    }
}
_viv_uniform float uint8Scale;
_viv_uniform float input_ZP;
_viv_uniform float output_ZP;

__kernel void roiPooling_generic_uint8 (
    __read_only image2d_array_t   input,
    __read_only image2d_array_t   rois,
    int       pool_width,
    int       pool_height,
    float  spatial_scale,
    __write_only image2d_array_t  output)
{
    int depth = get_global_id(1);
    int idx   = get_global_id(0);
    float2 poolWH = (float2)(pool_width, pool_height);

    int2 roiWH;
    float2 roi_size_scale;
    int2 coord_roi = (int2)(offset, idx);

    vxc_ushort8 rect_coord_u16;
    vxc_half8 rect_coord_fp16;
    VXC_ReadImage(rect_coord_u16, rois, coord_roi, 0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, rect_coord_fp16, rect_coord_u16, 16);
    vxc_float4 rect_coord_f;
    VXC_DP4x4(rect_coord_f, rect_coord_fp16, rect_coord_fp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    rect_coord_f = rect_coord_f.xyzw * spatial_scale;
    vxc_int4 rect_coord = convert_int4_rte(rect_coord_f);

    roiWH = rect_coord.zw - rect_coord.xy + 1;
    roiWH = roiWH > 1 ? roiWH : 1;
    roi_size_scale = convert_float2(roiWH) * q_PoolWH;
    float4 pwh = (float4)(0, 0, 1, 1);
    pwh.xy = 0;

    for (int ph = 0; ph < pool_height; ph++)
    {
        pwh.xz = (float2)(0, 1);
        for (int pw = 0; pw < pool_width; pw++)
        {
            float4 tmp = pwh;
            tmp = tmp * roi_size_scale.xyxy;
            tmp.xy = floor(tmp.xy);
            int2 start = convert_int2_rtz(tmp.xy);
            start += rect_coord.xy;
            tmp.zw = ceil(tmp.zw - EPS);
            int2 end = convert_int2_rtz(tmp.zw);
            end += rect_coord.xy;

            pwh.xz += 1;

            int4 coord_out = (int4)(ph * pool_width + pw, depth, idx, 0);
            end.xy  = end.xy > 0 ? end.xy : 0;
            start.xy = start.xy > 0 ?  start.xy : 0;
            end.xy = min(end.xy, inputSize.xy);
            start.xy = min(start.xy, inputSize.xy);
            if(end.y <= start.y || end.x <= start.x)
            {
                unsigned char vec = 0;
                VXC_WriteImage2DArray(output, coord_out, vec, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
                continue;
            }

            unsigned char output_data = 0;

            int h = start.y;
            do
            {
                int w = start.x;
                do
                {
                    int4 coord_in = (int4)(w, h, depth, 0);
                    unsigned char vec0;
                    VXC_ReadImage2DArray(vec0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0,VXC_RM_TowardZero, 0));
                    w ++;

                    output_data = max(output_data, vec0);
                } while (w < end.x);
                h ++;
            } while (h < end.y);

            float temp = convert_float(output_data);
            temp = temp - input_ZP;
            temp = temp * uint8Scale + output_ZP;
            output_data = convert_uchar_rte(temp);

            unsigned char minData;
            _viv_asm(COPY, minData, minVal, 4);
            output_data = max(minData, output_data);
            VXC_WriteImage2DArray(output, coord_out, output_data, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
        }
        pwh.yw += 1;
    }
}

__kernel void roiPooling_generic_uint8_uint8 (
    __read_only image2d_array_t   input,
    __read_only image2d_array_t   rois,
    int       pool_width,
    int       pool_height,
    float  spatial_scale,
    __write_only image2d_array_t  output)
{
    int depth = get_global_id(1);
    int idx   = get_global_id(0);
    float2 poolWH = (float2)(pool_width, pool_height);

    int2 roiWH;
    float2 roi_size_scale;
    int2 coord_roi = (int2)(offset, idx);

    vxc_uchar8 rect_coord_u16;
    VXC_ReadImage(rect_coord_u16, rois, coord_roi, 0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    vxc_float4 rect_coord_f;
    VXC_DP4x4(rect_coord_f, rect_coord_u16, rect_coord_u16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    rect_coord_f = rect_coord_f * scaleROI + roi_tail;
    rect_coord_f = rect_coord_f.xyzw * spatial_scale;
    vxc_int4 rect_coord = convert_int4_rte(rect_coord_f);

    roiWH = rect_coord.zw - rect_coord.xy + 1;
    roiWH = roiWH > 1 ? roiWH : 1;
    roi_size_scale = convert_float2(roiWH) * q_PoolWH;
    float4 pwh = (float4)(0, 0, 1, 1);
    pwh.xy = 0;

    for (int ph = 0; ph < pool_height; ph++)
    {
        pwh.xz = (float2)(0, 1);
        for (int pw = 0; pw < pool_width; pw++)
        {
            float4 tmp = pwh;
            tmp = tmp * roi_size_scale.xyxy;
            tmp.xy = floor(tmp.xy);
            int2 start = convert_int2_rtz(tmp.xy);
            start += rect_coord.xy;
            tmp.zw = ceil(tmp.zw - EPS);
            int2 end = convert_int2_rtz(tmp.zw);
            end += rect_coord.xy;

            pwh.xz += 1;

            int4 coord_out = (int4)(ph * pool_width + pw, depth, idx, 0);
            end.xy  = end.xy > 0 ? end.xy : 0;
            start.xy = start.xy > 0 ?  start.xy : 0;
            end.xy = min(end.xy, inputSize.xy);
            start.xy = min(start.xy, inputSize.xy);
            if(end.y <= start.y || end.x <= start.x)
            {
                unsigned char vec = 0;
                VXC_WriteImage2DArray(output, coord_out, vec, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
                continue;
            }

            unsigned char output_data = 0;

            int h = start.y;
            do
            {
                int w = start.x;
                do
                {
                    int4 coord_in = (int4)(w, h, depth, 0);
                    unsigned char vec0;
                    VXC_ReadImage2DArray(vec0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0,VXC_RM_TowardZero, 0));
                    w ++;

                    output_data = max(output_data, vec0);
                } while (w < end.x);
                h ++;
            } while (h < end.y);

            float temp = convert_float(output_data);
            temp = temp - input_ZP;
            temp = temp * uint8Scale + output_ZP;
            output_data = convert_uchar_rte(temp);

            unsigned char minData;
            _viv_asm(COPY, minData, minVal, 4);
            output_data = max(minData, output_data);
            VXC_WriteImage2DArray(output, coord_out, output_data, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
        }
        pwh.yw += 1;
    }
}
