#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits uniExtractOddUint8Stride2_2x8;
_viv_uniform VXC_512Bits uniExtractEvenUint8Stride2_2x8;
_viv_uniform float tmpScale;
_viv_uniform float tmpZP;

_viv_uniform int block_size;
_viv_uniform int volume;
_viv_uniform int output_depth;
_viv_uniform VXC_512Bits uniConvertDirUint8Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertEndUint8Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertInt32toUint8_2x8;

__kernel void vxcReorg2_uint8_uint8_stride2_noFl
    (
    image2d_array_t input,
    int stride,
    int input_depth,
    image2d_array_t output
    )
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);

    int4 coord = (int4)(gidx, gidy, gidz, 0);
    int4 coord_out = (int4)(gidx >> 1, gidy >> 1, 0, 0);
    int out_d0, out_d1;
    vxc_uchar16 imageData;
    vxc_uchar8  imgVal0, imgVal1;

    VXC_ReadImage2DArray(imageData, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_DP2x8(imgVal0, imageData, imageData, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniExtractEvenUint8Stride2_2x8);
    VXC_DP2x8(imgVal1, imageData, imageData, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniExtractOddUint8Stride2_2x8);

    out_d0 = (gidy & 1) * 2 * input_depth + gidz;
    out_d1 = out_d0 + input_depth;

    coord_out.z = out_d0;
    VXC_WriteImage2DArray(output, coord_out, imgVal0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    coord_out.z = out_d1;
    VXC_WriteImage2DArray(output, coord_out, imgVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
__kernel void vxcReorg2_uint8_uint8_general_noFl
    (
    image2d_array_t input,
    int stride,
    int input_depth,
    image2d_array_t output
    )
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int4 coord = (int4)(gidx, gidy, gidz, 0);

    uchar imageData;
    VXC_ReadImage2DArray(imageData, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));

    ushort block_size_s = (ushort)block_size;
    ushort sidx = (ushort)gidx;
    ushort sidy = (ushort)gidy;
    ushort tmpX = sidx % block_size_s;
    ushort tmpY = sidy % block_size_s;
    int tmpId0 = tmpX;
    int tmpId1 = tmpY;
    int4 coord_out = (int4)((int)(sidx / block_size_s), (int)(sidy / block_size_s), 0, 0);
    coord_out.z = tmpId0 * input_depth + tmpId1 * block_size * input_depth + gidz;
    //int4 coord_out = (int4)(gidx / block_size, gidy / block_size, 0, 0);
    //coord_out.z = (gidx  % block_size) * input_depth + (gidy % block_size) * block_size * input_depth + gidz;

    VXC_WriteImage2DArray(output, coord_out, imageData, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}

__kernel void vxcReorg2_uint8_uint8_stride2
    (
    image2d_array_t input,
    int stride,
    int input_depth,
    image2d_array_t output
    )
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);

    int4 coord = (int4)(gidx, gidy, gidz, 0);
    int4 coord_out = (int4)(gidx >> 1, gidy >> 1, 0, 0);
    int out_d0, out_d1;
    //int tmpw = gidz / input_depth;
    //int tmpz = gidz % input_depth;
    vxc_uchar16 imageData;
    vxc_uchar8  imgVal0, imgVal1;

    VXC_ReadImage2DArray(imageData, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_DP2x8(imgVal0, imageData, imageData, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniExtractEvenUint8Stride2_2x8);
    VXC_DP2x8(imgVal1, imageData, imageData, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniExtractOddUint8Stride2_2x8);

    //out_d0 = (gidx  % block_size) * input_depth + (gidy % block_size) * block_size * input_depth + tmpz + tmpw * output_depth;
    out_d0 = (gidy & 1) * 2 * input_depth + gidz;
    out_d1 = out_d0 + input_depth;

    vxc_float4 tmpVal0, tmpVal1, tmpVal2, tmpVal3;
    vxc_int4 tmpOut0, tmpOut1;

    VXC_DP4x4(tmpVal0, imgVal0, imgVal0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDirUint8Fp32_4x4);
    VXC_DP4x4(tmpVal1, imgVal0, imgVal0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertEndUint8Fp32_4x4);
    VXC_DP4x4(tmpVal2, imgVal1, imgVal1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDirUint8Fp32_4x4);
    VXC_DP4x4(tmpVal3, imgVal1, imgVal1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertEndUint8Fp32_4x4);

    tmpVal0 = tmpVal0 * tmpScale + tmpZP;
    tmpOut0 = convert_int4_rte(tmpVal0);
    tmpVal1 = tmpVal1 * tmpScale + tmpZP;
    tmpOut1 = convert_int4_rte(tmpVal1);
    VXC_DP2x8(imgVal0, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertInt32toUint8_2x8); //output

    tmpVal2 = tmpVal2 * tmpScale + tmpZP;
    tmpOut0 = convert_int4_rte(tmpVal2);
    tmpVal3 = tmpVal3 * tmpScale + tmpZP;
    tmpOut1 = convert_int4_rte(tmpVal3);
    VXC_DP2x8(imgVal1, tmpOut0, tmpOut1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertInt32toUint8_2x8); //output

    coord_out.z = out_d0;
    VXC_WriteImage2DArray(output, coord_out, imgVal0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    coord_out.z = out_d1;
    VXC_WriteImage2DArray(output, coord_out, imgVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
__kernel void vxcReorg2_uint8_uint8_general
    (
    image2d_array_t input,
    int stride,
    int input_depth,
    image2d_array_t output
    )
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int4 coord = (int4)(gidx, gidy, gidz, 0);

    uchar imageData;
    VXC_ReadImage2DArray(imageData, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));

    ushort block_size_s = (ushort)block_size;
    ushort sidx = (ushort)gidx;
    ushort sidy = (ushort)gidy;
    ushort tmpX = sidx % block_size_s;
    ushort tmpY = sidy % block_size_s;
    int tmpId0 = tmpX;
    int tmpId1 = tmpY;
    int4 coord_out = (int4)((int)(sidx / block_size_s), (int)(sidy / block_size_s), 0, 0);
    coord_out.z = tmpId0 * input_depth + tmpId1 * block_size * input_depth + gidz;
    //int4 coord_out = (int4)(gidx / block_size, gidy / block_size, 0, 0);
    //coord_out.z = (gidx  % block_size) * input_depth + (gidy % block_size) * block_size * input_depth + gidz;

    float tmpVal0;
    int tmpOut0;

    tmpVal0 = imageData * tmpScale + tmpZP;
    tmpOut0 = convert_int_sat_rte(tmpVal0);
    imageData = convert_uchar(tmpOut0);
    VXC_WriteImage2DArray(output, coord_out, imageData, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}
_viv_uniform VXC_512Bits uniExtractEvenFp16Stride2_4x4;
_viv_uniform VXC_512Bits uniExtractOddFp16Stride2_4x4;
__kernel void vxcReorg2_fp16_fp16_stride2
    (
    image2d_array_t input,
    int stride,
    int input_depth,
    image2d_array_t output
    )
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);

    int4 coord = (int4)(gidx, gidy, gidz, 0);
    int4 coord_out = (int4)(gidx >> 1, gidy >> 1, 0, 0);
    int out_d0, out_d1;
    vxc_short8 imageData;
    vxc_short8 imgVal0, imgVal1;
    //int tmpw = gidz / input_depth;
    //int tmpz = gidz % input_depth;

    VXC_ReadImage2DArray(imageData, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_DP4x4(imgVal0, imageData, imageData, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtractEvenFp16Stride2_4x4);
    VXC_DP4x4(imgVal1, imageData, imageData, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtractOddFp16Stride2_4x4);

    //out_d0 = (gidx  % block_size) * input_depth + (gidy % block_size) * block_size * input_depth + tmpz + tmpw * output_depth;
    out_d0 = (gidy & 1) * 2 * input_depth + gidz;
    out_d1 = out_d0 + input_depth;

    coord_out.z = out_d0;
    VXC_WriteImage2DArray(output, coord_out, imgVal0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    coord_out.z = out_d1;
    VXC_WriteImage2DArray(output, coord_out, imgVal1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}

__kernel void vxcReorg2_fp16_fp16_general
    (
    image2d_array_t input,
    int stride,
    int input_depth,
    image2d_array_t output
    )
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int4 coord = (int4)(gidx, gidy, gidz, 0);

    short imageData;
    VXC_ReadImage2DArray(imageData, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));

    ushort block_size_s = (ushort)block_size;
    ushort sidx = (ushort)gidx;
    ushort sidy = (ushort)gidy;
    ushort tmpX = sidx % block_size_s;
    ushort tmpY = sidy % block_size_s;
    int tmpId0 = tmpX;
    int tmpId1 = tmpY;
    int4 coord_out = (int4)((int)(sidx / block_size_s), (int)(sidy / block_size_s), 0, 0);
    coord_out.z = tmpId0 * input_depth + tmpId1 * block_size * input_depth + gidz;
    //int4 coord_out = (int4)(gidx / block_size, gidy / block_size, 0, 0);
    //coord_out.z = (gidx  % block_size) * input_depth + (gidy % block_size) * block_size * input_depth + gidz;

    VXC_WriteImage2DArray(output, coord_out, imageData, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}
