#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits uniConvertIntegerLo_2x8;
_viv_uniform int4 offset4;

#define TENSOR_COPY_I16TO16BITS(dst_name, dst_type, copy_type) \
__kernel void vxTensorCrop_I16to##dst_name ( \
    __read_only image2d_array_t  input, \
    __write_only image2d_array_t output) \
{ \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0); \
    vxc_char16 src0; \
    dst_type dst; \
    copy_type result; \
    VXC_ReadImage2DArray(src0, input,coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
    coord.xyz -= offset4.xyz; \
 \
    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8); \
 \
    _viv_asm(COPY, result, dst, 16); \
    VXC_WriteImage2DArray(output, coord, result, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
TENSOR_COPY_I16TO16BITS(I16, vxc_short8, vxc_short8)
TENSOR_COPY_I16TO16BITS(F16, vxc_half8,  vxc_short8)

#define TENSOR_COPY_I16TO16BITS_2D(dst_name, dst_type, copy_type) \
__kernel void vxTensorCrop_I16to##dst_name##_2D ( \
    __read_only image2d_array_t  input, \
    __write_only image2d_array_t output) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
    vxc_char16 src0; \
    dst_type dst; \
    copy_type result; \
    VXC_ReadImage(src0, input, coord.xy, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
    coord.xy -= offset4.xy; \
 \
    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8); \
 \
    _viv_asm(COPY, result, dst, 16); \
    VXC_WriteImage(output, coord.xy, result, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
TENSOR_COPY_I16TO16BITS_2D(I16, vxc_short8, vxc_short8)
TENSOR_COPY_I16TO16BITS_2D(F16, vxc_half8,  vxc_short8)

__kernel void vxTensorCrop_16Bits (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 src0;
    VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    coord.xyz -= offset4.xyz;

    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxTensorCrop_16Bits_2D (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_short8 src0;
    VXC_ReadImage(src0, input,coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    coord.xy -= offset4.xy;

    VXC_WriteImage(output, coord.xy, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniConvertIntegerHi_2x8;
#define TENSOR_COPY_I8TO8BITS(dst_name, dst_type) \
__kernel void vxTensorCrop_I8to##dst_name ( \
    __read_only image2d_array_t  input, \
    __write_only image2d_array_t output) \
{ \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0); \
    vxc_char16 src0; \
    dst_type dst; \
    VXC_ReadImage2DArray(src0, input,coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
    coord.xyz -= offset4.xyz; \
 \
    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8); \
    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerHi_2x8); \
 \
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0)); \
}
TENSOR_COPY_I8TO8BITS(I8, vxc_char16)

#define TENSOR_COPY_I8TO8BITS_2D(dst_name, dst_type) \
__kernel void vxTensorCrop_I8to##dst_name##_2D ( \
    __read_only image2d_array_t  input, \
    __write_only image2d_array_t output) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
    vxc_char16 src0; \
    dst_type dst; \
    VXC_ReadImage(src0, input,coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
    coord.xy -= offset4.xy; \
 \
    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8); \
    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerHi_2x8); \
 \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0)); \
}
TENSOR_COPY_I8TO8BITS_2D(I8, vxc_char16)

#define TENSOR_COPY_I8TO16BITS(dst_name, dst_type, copy_type) \
__kernel void vxTensorCrop_I8to##dst_name ( \
    __read_only image2d_array_t  input, \
    __write_only image2d_array_t output) \
{ \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0); \
    vxc_char16 src0; \
    dst_type dst0, dst1; \
    copy_type result0, result1; \
    VXC_ReadImage2DArray(src0, input,coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
    coord.xyz -= offset4.xyz; \
 \
    VXC_DP2x8(dst0, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8); \
    VXC_DP2x8(dst1, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerHi_2x8); \
 \
    _viv_asm(COPY, result0, dst0, 16); \
    _viv_asm(COPY, result1, dst1, 16); \
    VXC_WriteImage2DArray(output, coord, result0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    coord.x += 8; \
    VXC_WriteImage2DArray(output, coord, result1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
TENSOR_COPY_I8TO16BITS(I16, vxc_short8, vxc_short8)
TENSOR_COPY_I8TO16BITS(F16, vxc_half8,  vxc_short8)

#define TENSOR_COPY_I8TO16BITS_2D(dst_name, dst_type, copy_type) \
__kernel void vxTensorCrop_I8to##dst_name##_2D ( \
    __read_only image2d_array_t  input, \
    __write_only image2d_array_t output) \
{ \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), get_global_id(1)); \
    vxc_char16 src0; \
    dst_type dst0, dst1; \
    copy_type result0, result1; \
    VXC_ReadImage(src0, input, coord.xy, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
    coord.xyz -= offset4.xyx; \
 \
    coord.z += 8; \
    VXC_DP2x8(dst0, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8); \
    VXC_DP2x8(dst1, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerHi_2x8); \
 \
    _viv_asm(COPY, result0, dst0, 16); \
    _viv_asm(COPY, result1, dst1, 16); \
    VXC_WriteImage(output, coord.xy, result0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_WriteImage(output, coord.zy, result1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
TENSOR_COPY_I8TO16BITS_2D(I16, vxc_short8, vxc_short8)
TENSOR_COPY_I8TO16BITS_2D(F16, vxc_half8,  vxc_short8)

_viv_uniform VXC_512Bits uniU8MulAndPostShift_Lo_2x8;
_viv_uniform VXC_512Bits uniU8MulAndPostShift_Hi_2x8;
_viv_uniform int2 multAndoutZP;//[0:15] multiplier, [31:63] output zp
__kernel void vxTensorCrop_U8toU8
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_uchar16 src0, dst;
    VXC_ReadImage2DArray(src0, input,coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord.xyz -= offset4.xyx;

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Hi_2x8);
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxTensorCrop_U8toU8_2D
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_uchar16 src0, dst;
    VXC_ReadImage(src0, input,coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord.xy -= offset4.xy;

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Hi_2x8);
    VXC_WriteImage(output, coord.xy, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxTensorCrop_U8toF16
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_uchar16 src0;
    VXC_ReadImage2DArray(src0, input,coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    coord.xyz -= offset4.xyz;

    vxc_half8 data;
    vxc_short8 dst;

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(data, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniU8MulAndPostShift_Lo_2x8);
    _viv_asm(COPY, dst, data, 16);
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxTensorCrop_U8toF16_2D
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_uchar16 src0;
    VXC_ReadImage(src0, input,coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    coord.xy -= offset4.xy;
    vxc_half8 data;
    vxc_short8 dst;

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(data, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniU8MulAndPostShift_Lo_2x8);
    _viv_asm(COPY, dst, data, 16);
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxTensorCrop_8Bits
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_uchar16 src0;
    VXC_ReadImage2DArray(src0, input,coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord.xyz -= offset4.xyz;

    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxTensorCrop_8Bits_2D
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_uchar16 src0;
    VXC_ReadImage(src0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord.xy -= offset4.xy;

    VXC_WriteImage(output, coord, src0, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxTensorCrop_F16toI8 (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 v0, v1;
    vxc_half8 src0, src1;
    vxc_char16 dst;
    VXC_ReadImage2DArray(v0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, v0, 16);
    VXC_ReadImage2DArray(v1, input, coord, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src1, v1, 16);

    coord.xyz -= offset4.xyz;

    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8);
    VXC_DP2x8(dst, src1, src1, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8);

    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxTensorCrop_F16toI8_2D (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_short8 v0, v1;
    vxc_half8 src0, src1;
    vxc_char16 dst;
    VXC_ReadImage(v0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, v0, 16);
    VXC_ReadImage(v1, input, coord, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src1, v1, 16);

    coord.xy -= offset4.xy;

    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8);
    VXC_DP2x8(dst, src1, src1, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8);

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxTensorCrop_F16toI16 (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 v0;
    vxc_half8 src0;
    vxc_short8 dst;
    VXC_ReadImage2DArray(v0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, v0, 16);

    coord.xyz -= offset4.xyz;

    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8);

    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxTensorCrop_F16toI16_2D (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_short8 v0;
    vxc_half8 src0;
    vxc_char16 dst;
    VXC_ReadImage(v0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, v0, 16);

    coord.xy -= offset4.xy;

    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8);

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxTensorCrop_F16toU8
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    vxc_short8 v0, v1;
    vxc_half8 src0, src1;
    vxc_uchar16 dst;
    VXC_ReadImage2DArray(v0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, v0, 16);
    VXC_ReadImage2DArray(v1, input, coord, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src1, v1, 16);

    coord.xyz -= offset4.xyz;

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, src1, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxTensorCrop_F16toU8_2D
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_short8 v0, v1;
    vxc_half8 src0, src1;
    vxc_uchar16 dst;

    VXC_ReadImage(v0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, v0, 16);
    VXC_ReadImage(v1, input, coord, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src1, v1, 16);

    coord.xy -= offset4.xy;

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, src1, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);

    VXC_WriteImage(output, coord.xy, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

